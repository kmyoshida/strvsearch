<!DOCTYPE html>
<html>
	<head>
		<title>StravaSearch</title>

		<link rel="stylesheet" href="/lib/leaflet.css" />
		<link rel="stylesheet" href="/lib/MarkerCluster.css" />
		<link rel="stylesheet" href="/lib/MarkerCluster.Default.css" />
		<link rel="stylesheet" href="/lib/style.css" />
		<link rel="icon" type="image/png" href="favicon.png" />
		
		<meta name="viewport" content="width=device-width, initial-scale=1.0">

		<script src="/lib/leaflet.js"></script>
		<script src="/lib/leaflet.markercluster-src.js"></script>
		<script src="/lib/jquery.min.js"></script>
		
		
		<script>

			Number.prototype.pad = function(size) {
      			var s = String(this);
      			while (s.length < (size || 2)) {s = "0" + s;}
      			return s;
    		}

			var page_query = {}; // for persistency
			var page_filter = {};
			var page_activities;

			// set default value
			page_filter = {
				"year": [2013, 2014, 2015, 2016, 2017, 2018],
				"type": ["Run", "Swim", "Ride"],
			}


			var months = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
			var types = { "Run": "&#x1F3C3;", "Ride": "&#x1f6b2;", "Swim":"&#x1f3ca;", "AlpineSki":"&#x2744;", "NordicSki":"&#x2744;"};
			var workout_types = [ "-","Race", "Long Run", "Workout", "","","","","","","-","Race","Workout"];

			var map;
			var markers = undefined;

			var year = new Set();
			var type = new Set();
			var workout_type = new Set();

			function secondsToTime(secs) 
			{
			    var hours = Math.floor(secs / (60 * 60));
			    var divisor_for_minutes = secs % (60 * 60);
			    var minutes = Math.floor(divisor_for_minutes / 60);
			    var divisor_for_seconds = divisor_for_minutes % 60;
			    var seconds = Math.ceil(divisor_for_seconds);
			    var obj = { "h": hours, "m": minutes, "s": seconds };
			    return obj;
			}

			function getParameterByName(name) 
			{
				name = name.replace(/[\[]/, "\\[").replace(/[\]]/, "\\]");
				var regex = new RegExp("[\\?&]" + name + "=([^&#]*)"),
				results = regex.exec(location.search);
				return results === null ? "" : decodeURIComponent(results[1].replace(/\+/g, " "));
			}

			function preProcessActivities(ac) 
			{
				for (var i=0; i<ac.length; i++) {
					ac[i].start_date = new Date(ac[i].start_date);
					ac[i].year = ac[i].start_date.getFullYear();
					ac[i].month = ac[i].start_date.getMonth();
					ac[i].day = ac[i].start_date.getDate();
					ac[i].dow = ac[i].start_date.getDay();
					year.add(ac[i].year);
					type.add(ac[i].type);
					workout_type.add(ac[i].workout_type);
				}
				return ac;
			}

			function toggleFilter(filter, key, value) 
			{
				console.log("toggleFilter key:" + key + " val:" + value);			
				if (key in filter)  {
					var v = filter[key];
					if (Array.isArray(v)) {
						if (v.includes(value)) {
							// remove value
 							for (var i in v) {
        						if(v[i]==value) {
            						v.splice(i,1);
            						break;
        						}
    						}
    						if (v.length == 1)
    							filter[key] = v[0];
						} else {
							// add value
							v.push(value);
						}
					} else {
						if (v == value) {
							delete filter[key];
						} else {
							filter[key] = [v, value];
						}
					}
				} else {
					filter[key] = value;
				}
				return filter;
			}

			function filterActivityList(list, filter) 
			{
				console.log("[filterActivityList] filtering " + list.length + " activities with filter:");
				console.log(JSON.stringify(filter));

				var filtered = [];
				for (var i=0; i<list.length; i++) {
					var match = true;
					for (key in filter) {
						if (Array.isArray(filter[key])) {
							if (!(filter[key].includes(list[i][key]))) {
								match = false;
								break;
							}
						} else {
							if (list[i][key] != filter[key]) {
								match = false;
								break;
							}
						}
					}
					if (match)
						filtered.push(list[i]);
				}
				console.log("[filterActivityList] " + filtered.length + " items");
				console.log("[filterActivityList] END");
				return filtered;
			}




			function sortActivityList(list, reverse) 
			{
				console.log("sortActivityList");
				return list.sort(function(a,b) {
					var d = a.start_date.getTime() - b.start_date.getTime(); 
					return reverse ? -d : d;
				});

				
			}



			function updateFiltersDisplay(filter) 
			{
				for (key in filter) {
					var val = filter[key];
					var id = "";
					if (Array.isArray(val)) {
						for (var i=0; i<val.length; i++) {
							id  = "#f-" + key + "-" + val[i];
							if ($(id).length)
								$(id).addClass("on");
						}
					} else {
						id = "#f-" + key + "-" + val;
						if ($(id).length)
							$(id).setClass("on");
					}
				}
			}

			function updateResultsDisplay(list) 
			{
				
				var reshtml = "";
				var total_distance = 0;
				var total_time = 0;

				list = sortActivityList(list, true);

				for (var i=0; i<list.length;i++) {
					var start_date = new Date(list[i].start_date);
					var elapsed = secondsToTime(list[i].elapsed_time);
					var wt = list[i].workout_type;

					if (wt == null) wt = 0;

					total_time += list[i].elapsed_time;
					total_distance += list[i].distance/1000;

					reshtml += "<tr>";
					reshtml += "<td class='td_activity'>" + types[list[i].type] + "</td>";
					reshtml += "<td class='td_date'>" + start_date.getFullYear() + " " + months[start_date.getMonth()] + " " + start_date.getDate() + "</td>";
					reshtml += "<td class='td_distance'>" + Math.floor(list[i].distance/1000) + " km" + "</td>";
					reshtml += "<td class='td_duration'>" + elapsed.h + ":" + elapsed.m.pad(2) + ":" + elapsed.s.pad(2) + "" + "</td>";
					reshtml += "<td class='td_type'><div class='wt wt_" + wt + "'>" + workout_types[wt] + "</div></td>";					
					reshtml += "<td class='td_name'><a target='_blank' href='https://www.strava.com/activities/" + list[i].id + "'>" + list[i].name + "</a></td>";
					reshtml += "</tr>";

				}
				$('#blurb').html("" + list.length + " activitie(s) - " + secondsToTime(total_time).h + " hours - " +  Math.floor(total_distance) + " km");
				$('#res_tbody').html(reshtml);
			}

			function updateMapDisplay(list) 
			{
				var minlat = undefined, maxlat = undefined; minlon = undefined, maxlon = undefined;

				if (markers != undefined) {
					markers.remove();
				}
				markers= L.markerClusterGroup();

				for (var i = 0; i < list.length; i++) {
					var a = list[i];
					if (a.start_latlng) {
						var name = a.name;
						var marker = L.marker(new L.LatLng(a.start_latlng[0], a.start_latlng[1]), { title: name });
						marker.bindPopup(name);
						markers.addLayer(marker);

						if (minlat == undefined) {
							minlat = a.start_latlng[0];
							minlon = a.start_latlng[1];
							maxlat = a.start_latlng[0];
							maxlon = a.start_latlng[1];
						} else {
							minlat = Math.min(minlat, a.start_latlng[0]);
							minlon = Math.min(minlon, a.start_latlng[1]);
							maxlat = Math.max(maxlat, a.start_latlng[0]);
							maxlon = Math.max(maxlon, a.start_latlng[1]);
						}
					}
				}

				map.addLayer(markers);

				if (minlat != undefined) 
					map.fitBounds([[minlat, minlon],[maxlat,maxlon]], {padding:[5,5]});

			}
			
			function updatePage(filter, query) {

				console.log("update_page " + query);

				updateFiltersDisplay(filter);
				query['keyword'] = $("#keyword").val();
				$.getJSON("/searchws", query, function(results) {
					page_activities = preProcessActivities(results);
					var ac = filterActivityList(page_activities, filter);
					ac = sortActivityList(ac);
					console.log(ac);
					updateResultsDisplay(ac);
					updateMapDisplay(ac);
				});
			}

			function initMap() 
			{
				var tiles = L.tileLayer('http://{s}.tile.osm.org/{z}/{x}/{y}.png', {
						maxZoom: 18,
						attribution: '&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors, Points &copy 2012 LINZ'
					});
				var latlng = L.latLng(48.82, 2.34);
				var m = L.map('map', {center: latlng, zoom: 10, layers: [tiles]});
				return m;
			}

			function layoutPage() {
				var h_offset = $("#page-header").outerHeight() + $("#searchpane").outerHeight()

				console.log("window: " + $(window).width() + "x" + $(window).height());
				//console.log("h_offset: " + h_offset);

				$("#respane").outerHeight( $(window).height() - h_offset);
				$("#res_tbody").height( $("#respane").height() - $("#blurb").height() - $("#res_thead").height());




				$("#map").height( $("#respane").height());
				$("#map").width( $(window).width() - $("#respane").outerWidth());

				console.log("map: " + $("#map").width());
				console.log("respane: " + $("#respane").width());
				
				map.invalidateSize();

			}

			$(document).ready(function() {

				map = initMap();

				updatePage(page_filter, page_query);
				layoutPage();

				$('#submit').click(function() {
					updatePage(page_filter, page_query);
				});

				$('#keyword').change(function() {
					updatePage(page_filter, page_query);
				});

				$('#filters a').click(function() {

					$(this).toggleClass("on");
					var a = $(this).attr("id").split("-"), key = a[1], val = a[2];
					if (key == "year" || key == "workout_type") 
						val = Number(val);

					toggleFilter(page_filter, key, val);

					var ac = filterActivityList(page_activities, page_filter);
					updateResultsDisplay(ac);
					updateMapDisplay(ac);					
				});

			});

			$(window).resize(function() {
				layoutPage();
			});


		</script>

	</head>

	<body>
	<div class="container">

		<header id="page-header">
			<nav id="nav-bar">
				<div id="logo">STRVSEARCH</div>
				<ul class="global-nav">
					<li class="drop-down-menu"><a href="/refresh" class="selection">Refresh</a></li>
				</ul>
				<ul class="user-nav">
					<li class="drop-down-menu"><a href="https://www.strava.com/athletes/<%=athlete.id%>"><%= athlete.firstname %></a></li>
					<li class="drop-down-menu"><a href="/logout">Log Out</a></li>
				</ul>
			</nav>
		</header>

		<div id="searchpane">

			<div id="searchbar">
					<label id="keyw_label">Keywords</label>
					<input id='keyword' type="text" name='keyword' />
					<input id='submit' type='submit' value='Search'>
			</div>

			<div id="filters">
				<div id="f-year" class="subfilter">
					<div class="label">Year</div>
					<div class="tags">
						<a id="f-year-2012">2012</a>
						<a id="f-year-2013">2013</a>
						<a id="f-year-2014">2014</a>
						<a id="f-year-2015">2015</a>
						<a id="f-year-2016">2016</a>
						<a id="f-year-2017">2017</a>
						<a id="f-year-2018">2018</a>
					</div>
				</div>
				<div id="f-type" class="subfilter">
					<div class="label">Activity</div>
					<div class="tags">
						<a id="f-type-Run">Run</a>
						<a id="f-type-Swim">Swim</a>
						<a id="f-type-Ride">Ride</a>
						<a id="f-type-AlpineSki">Alpine&nbsp;Ski</a>
						<a id="f-type-NordicSki">Nordic&nbsp;Ski</a>
						<a id="f-type-Hike">Hike</a>
						<a id="f-type-StandUpPaddling">Stand&nbsp;Up&nbsp;Paddling</a>
						<a id="f-type-BackcountrySki">Backcountry&nbsp;Ski</a>
					</div>
				</div>
				<div id="f-workout" class="subfilter">
					<div class="label">Type</div>
					<div class="tags">
						<a id="f-workout_type-1">&#x1F3C3;&nbsp;Race</a>
						<a id="f-workout_type-2">&#x1F3C3;&nbsp;Long&nbsp;Run</a>
						<a id="f-workout_type-3">&#x1F3C3;&nbsp;Workout</a>
						<a id="f-workout_type-11">&#x1f6b2;&nbsp;Race</a>
						<a id="f-workout_type-12">&#x1f6b2;&nbsp;Workout</a>
					</div>
				</div>
			</div>



		</div>

		<div id="respane">
			<div id="blurb"></div>
			<div id="reslist">
				<table>
					<thead id="res_thead" class="hide_mobile">
						<tr>
							<th id="th_activity"></th>
							<th id="th_date">date</th>
							<th id="th_distance">distance</th>
							<th id="th_duration">duration</th>
							<th id="th_type">type</th>
							<th id="th_name">activity</th>
						</tr>
					</thead>
					<tbody id="res_tbody">
					</tbody>
				</table>
			</div>
		</div><div id="map" class="hide_mobile"></div>

</div>
	</body>
</html>
